import 'package:Dopamine_Booster/components/categories_bar.dart';
import 'package:Dopamine_Booster/components/popup_msg.dart';
import 'package:flutter/material.dart';
import 'package:quiz_repository/quiz.repository.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class AddCategoriesScreen extends StatefulWidget {
  const AddCategoriesScreen({Key? key}) : super(key: key);

  @override
  _AddCategoriesScreenState createState() => _AddCategoriesScreenState();
}

class _AddCategoriesScreenState extends State<AddCategoriesScreen> {
  final QuizRepository quizRepository = FirebaseQuizRepo(); // Initialize the quiz repository
  final TextEditingController _categoryNameController = TextEditingController();
  List<Category> categories = [];
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _loadCategories();
  }

  // This method loads all categories from the repository and updates the UI.
  Future<void> _loadCategories() async {
    try {
      final loadedCategories = await quizRepository.getAllCategories(); // Load categories from the repository
      if (mounted) {
        setState(() {
          categories = loadedCategories; // Update the categories in the state
        });
      }
    } catch (e) {
      if (mounted) {
        displayMessageToUser('Failed to load categories!', context); // Display an error message if loading fails
      }
    }
  }

  // This method adds a new category after getting input from the user via a dialog.
  Future<void> _addCategory() async {
    // Show an AlertDialog to get the category name from the user
    final result = await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(AppLocalizations.of(context)!.addNewCat), // Title of the dialog
          content: TextField(
            controller: _categoryNameController, // Text controller to capture user input
            decoration: InputDecoration(hintText: AppLocalizations.of(context)!.enterCat), // Hint for the text field
          ),
          actions: <Widget>[
            // Cancel button to close the dialog without adding a category
            TextButton(
              child: Text(AppLocalizations.of(context)!.cancel),
              onPressed: () => Navigator.of(context).pop(), // Close the dialog
              style: TextButton.styleFrom(foregroundColor: Colors.black),
            ),
            // Add button to confirm the input and return the category name
            TextButton(
              child: Text(AppLocalizations.of(context)!.add),
              onPressed: () => Navigator.of(context).pop(_categoryNameController.text), // Pop the dialog with the entered text
              style: TextButton.styleFrom(foregroundColor: Colors.green),
            ),
          ],
        );
      },
    );

    // If the user has entered a non-empty category name, proceed to add the category
    if (result != null && result.isNotEmpty) {
      try {
        final newCategory = Category(
          categoryId: '', // Placeholder, as the ID will be generated by the repository
          categoryName: result, // Set the entered name as the category name
          quizCount: 0, // Set initial quiz count to 0
          quizzes: [], // Empty list of quizzes initially
        );
        // Add the new category to the repository
        await quizRepository.addCategory(newCategory);
        // Reload categories to reflect the newly added category
        _loadCategories();
      } catch (e) {
        // Display an error message if adding the category fails
        displayMessageToUser('Failed to add category!', context);
      }
    }

    // Clear the text field after the operation (whether successful or not)
    _categoryNameController.clear();
  }

  // This method deletes a given category after user confirmation.
  Future<void> _deleteCategory(Category category) async {
    // Show a confirmation dialog asking the user if they really want to delete the category
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(AppLocalizations.of(context)!.deleteCategory), // Dialog title
          content: Text(AppLocalizations.of(context)!.deleteCateMsg(category.categoryName)), // Message asking for confirmation with the category name
          actions: <Widget>[
            // Cancel button to close the dialog without deleting the category
            TextButton(
              child: Text(AppLocalizations.of(context)!.cancel),
              onPressed: () => Navigator.of(context).pop(false), // Pop the dialog and return false (cancel)
              style: TextButton.styleFrom(foregroundColor: Colors.black),
            ),
            // Delete button to confirm the deletion of the category
            TextButton(
              child: Text(AppLocalizations.of(context)!.delete),
              onPressed: () => Navigator.of(context).pop(true), // Pop the dialog and return true (confirm delete)
              style: TextButton.styleFrom(foregroundColor: Colors.red),
            ),
          ],
        );
      },
    );

    // If the user confirmed the deletion (confirmed == true), proceed to delete the category
    if (confirmed == true) {
      try {
        // Delete the category from the repository using its categoryId
        await quizRepository.deleteCategory(category.categoryId);
        // Reload categories to reflect the deletion
        _loadCategories();
      } catch (e) {
        // Display an error message if the category deletion fails
        displayMessageToUser('Failed to delete category!', context);
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    final filteredCategories = categories
        .where((category) => category.categoryName.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();

    return Scaffold(
      appBar: CategoriesBar(
        onSearchChanged: (newQuery) {
          setState(() {
            _searchQuery = newQuery;
          });
        },
      ),
      body: ListView.builder(
        itemCount: filteredCategories.length,
        itemBuilder: (context, index) {
          return Card(
            elevation: 2,
            margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Theme.of(context).primaryColor,
                child: Text(
                  filteredCategories[index].categoryName[0].toUpperCase(),
                  style: TextStyle(color: Theme.of(context).colorScheme.inversePrimary),
                ),
              ),
              title: Text(filteredCategories[index].categoryName),
              subtitle: Text('${filteredCategories[index].quizCount} quizzes'),
              trailing: IconButton(
                icon: const Icon(Icons.delete, color: Colors.red, size: 20),
                onPressed: () => _deleteCategory(filteredCategories[index]),
              ),
              onTap: () {
                // TODO: Future Navigate to category detail or quiz list
              },
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addCategory,
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        child: const Icon(Icons.add),
        tooltip: AppLocalizations.of(context)!.addNewCat,
      ),
    );
  }

  @override
  void dispose() {
    _categoryNameController.dispose();
    super.dispose();
  }
}
